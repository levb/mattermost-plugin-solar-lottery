// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-solar-lottery/server/api (interfaces: API)

// Package mock_api is a generated GoMock package.
package mock_api

import (
	gomock "github.com/golang/mock/gomock"
	store "github.com/mattermost/mattermost-plugin-solar-lottery/server/store"
	bot "github.com/mattermost/mattermost-plugin-solar-lottery/server/utils/bot"
	reflect "reflect"
)

// MockAPI is a mock of API interface
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// AddRotation mocks base method
func (m *MockAPI) AddRotation(arg0 *store.Rotation) (*store.Rotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRotation", arg0)
	ret0, _ := ret[0].(*store.Rotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRotation indicates an expected call of AddRotation
func (mr *MockAPIMockRecorder) AddRotation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRotation", reflect.TypeOf((*MockAPI)(nil).AddRotation), arg0)
}

// AddSkill mocks base method
func (m *MockAPI) AddSkill(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSkill", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSkill indicates an expected call of AddSkill
func (mr *MockAPIMockRecorder) AddSkill(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSkill", reflect.TypeOf((*MockAPI)(nil).AddSkill), arg0)
}

// ChangeRotationNeed mocks base method
func (m *MockAPI) ChangeRotationNeed(arg0 *store.Rotation, arg1, arg2 string, arg3, arg4 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ChangeRotationNeed", arg0, arg1, arg2, arg3, arg4)
}

// ChangeRotationNeed indicates an expected call of ChangeRotationNeed
func (mr *MockAPIMockRecorder) ChangeRotationNeed(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeRotationNeed", reflect.TypeOf((*MockAPI)(nil).ChangeRotationNeed), arg0, arg1, arg2, arg3, arg4)
}

// Debugf mocks base method
func (m *MockAPI) Debugf(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf
func (mr *MockAPIMockRecorder) Debugf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockAPI)(nil).Debugf), varargs...)
}

// DeleteRotation mocks base method
func (m *MockAPI) DeleteRotation(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRotation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRotation indicates an expected call of DeleteRotation
func (mr *MockAPIMockRecorder) DeleteRotation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRotation", reflect.TypeOf((*MockAPI)(nil).DeleteRotation), arg0)
}

// DeleteSkill mocks base method
func (m *MockAPI) DeleteSkill(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSkill", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSkill indicates an expected call of DeleteSkill
func (mr *MockAPIMockRecorder) DeleteSkill(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSkill", reflect.TypeOf((*MockAPI)(nil).DeleteSkill), arg0)
}

// DeleteUserSkill mocks base method
func (m *MockAPI) DeleteUserSkill(arg0 string) (*store.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserSkill", arg0)
	ret0, _ := ret[0].(*store.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserSkill indicates an expected call of DeleteUserSkill
func (mr *MockAPIMockRecorder) DeleteUserSkill(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserSkill", reflect.TypeOf((*MockAPI)(nil).DeleteUserSkill), arg0)
}

// Errorf mocks base method
func (m *MockAPI) Errorf(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf
func (mr *MockAPIMockRecorder) Errorf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockAPI)(nil).Errorf), varargs...)
}

// GetUser mocks base method
func (m *MockAPI) GetUser() (*store.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser")
	ret0, _ := ret[0].(*store.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockAPIMockRecorder) GetUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockAPI)(nil).GetUser))
}

// Infof mocks base method
func (m *MockAPI) Infof(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof
func (mr *MockAPIMockRecorder) Infof(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockAPI)(nil).Infof), varargs...)
}

// JoinRotation mocks base method
func (m *MockAPI) JoinRotation(arg0 string, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinRotation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinRotation indicates an expected call of JoinRotation
func (mr *MockAPIMockRecorder) JoinRotation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinRotation", reflect.TypeOf((*MockAPI)(nil).JoinRotation), arg0, arg1)
}

// LeaveRotation mocks base method
func (m *MockAPI) LeaveRotation(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveRotation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaveRotation indicates an expected call of LeaveRotation
func (mr *MockAPIMockRecorder) LeaveRotation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveRotation", reflect.TypeOf((*MockAPI)(nil).LeaveRotation), arg0)
}

// ListRotations mocks base method
func (m *MockAPI) ListRotations() (map[string]*store.Rotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRotations")
	ret0, _ := ret[0].(map[string]*store.Rotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRotations indicates an expected call of ListRotations
func (mr *MockAPIMockRecorder) ListRotations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRotations", reflect.TypeOf((*MockAPI)(nil).ListRotations))
}

// ListSkills mocks base method
func (m *MockAPI) ListSkills() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSkills")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSkills indicates an expected call of ListSkills
func (mr *MockAPIMockRecorder) ListSkills() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSkills", reflect.TypeOf((*MockAPI)(nil).ListSkills))
}

// RemoveRotationNeed mocks base method
func (m *MockAPI) RemoveRotationNeed(arg0 *store.Rotation, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveRotationNeed", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveRotationNeed indicates an expected call of RemoveRotationNeed
func (mr *MockAPIMockRecorder) RemoveRotationNeed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveRotationNeed", reflect.TypeOf((*MockAPI)(nil).RemoveRotationNeed), arg0, arg1)
}

// UpdateRotation mocks base method
func (m *MockAPI) UpdateRotation(arg0 string, arg1 func(*store.Rotation) error) (*store.Rotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRotation", arg0, arg1)
	ret0, _ := ret[0].(*store.Rotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRotation indicates an expected call of UpdateRotation
func (mr *MockAPIMockRecorder) UpdateRotation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRotation", reflect.TypeOf((*MockAPI)(nil).UpdateRotation), arg0, arg1)
}

// UpdateUserSkill mocks base method
func (m *MockAPI) UpdateUserSkill(arg0 string, arg1 int) (*store.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserSkill", arg0, arg1)
	ret0, _ := ret[0].(*store.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserSkill indicates an expected call of UpdateUserSkill
func (mr *MockAPIMockRecorder) UpdateUserSkill(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSkill", reflect.TypeOf((*MockAPI)(nil).UpdateUserSkill), arg0, arg1)
}

// ValidateSkill mocks base method
func (m *MockAPI) ValidateSkill(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateSkill", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateSkill indicates an expected call of ValidateSkill
func (mr *MockAPIMockRecorder) ValidateSkill(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateSkill", reflect.TypeOf((*MockAPI)(nil).ValidateSkill), arg0)
}

// Warnf mocks base method
func (m *MockAPI) Warnf(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnf", varargs...)
}

// Warnf indicates an expected call of Warnf
func (mr *MockAPIMockRecorder) Warnf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnf", reflect.TypeOf((*MockAPI)(nil).Warnf), varargs...)
}

// With mocks base method
func (m *MockAPI) With(arg0 bot.LogContext) bot.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "With", arg0)
	ret0, _ := ret[0].(bot.Logger)
	return ret0
}

// With indicates an expected call of With
func (mr *MockAPIMockRecorder) With(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockAPI)(nil).With), arg0)
}
