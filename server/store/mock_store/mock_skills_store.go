// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-solar-lottery/server/store (interfaces: SkillsStore)

// Package mock_store is a generated GoMock package.
package mock_store

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSkillsStore is a mock of SkillsStore interface
type MockSkillsStore struct {
	ctrl     *gomock.Controller
	recorder *MockSkillsStoreMockRecorder
}

// MockSkillsStoreMockRecorder is the mock recorder for MockSkillsStore
type MockSkillsStoreMockRecorder struct {
	mock *MockSkillsStore
}

// NewMockSkillsStore creates a new mock instance
func NewMockSkillsStore(ctrl *gomock.Controller) *MockSkillsStore {
	mock := &MockSkillsStore{ctrl: ctrl}
	mock.recorder = &MockSkillsStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSkillsStore) EXPECT() *MockSkillsStoreMockRecorder {
	return m.recorder
}

// LoadSkills mocks base method
func (m *MockSkillsStore) LoadSkills() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadSkills")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadSkills indicates an expected call of LoadSkills
func (mr *MockSkillsStoreMockRecorder) LoadSkills() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadSkills", reflect.TypeOf((*MockSkillsStore)(nil).LoadSkills))
}

// StoreSkills mocks base method
func (m *MockSkillsStore) StoreSkills(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreSkills", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreSkills indicates an expected call of StoreSkills
func (mr *MockSkillsStoreMockRecorder) StoreSkills(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreSkills", reflect.TypeOf((*MockSkillsStore)(nil).StoreSkills), arg0)
}
